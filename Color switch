<html> 
<head>
<style>
button{
position:relative;
top:20px;
left:150px;
}
#scorearea
{
    display:none;
    position:relative;
    top:30px;
    width=400px;
    height:50px;
    background-color:#add8e6;
    color:black;
}
</style>
</head>
 <body id="bod"> 
<center>
<canvas id="game_stage" width="400" height="600">
</canvas>
</center> 
<button onclick= "play()">
PLAY
</button>
<button onclick="high()">
    HIGHSCORE
</button>
<div id="scorearea">
</div>
</body>
</html>
<script> 
var game={
draw:game_stage.getContext('2d'),
h:600,
w:400,
bg_color:"#000000",
xpos:0,
ypos:0,
start:false,
gameover:false
}; 
 var player={
xpos:200-7,
ypos:550,
h:14,
w:14,
color:"",
rot:0
}; 
 var world={
xpos:210,
ypos:550,
rotx:0,
roty:90
}; 
var score=0; 
var coords={
 x_axis:function(x){ return (x*Math.cos(world.rotx*(Math.PI/180))+world.xpos); },
 y_axis:function get_y(y){ 
return (y*Math.sin(world.roty*(Math.PI/180))+world.ypos); 
} 
} 
 var _obs=[];
 var _player_death_particle=[]; 
var _switch=[]; 
 var colorz=['red','blue','green'];  player.color=colorz[Math.floor(Math.random()*colorz.length)];
 function switch_obs()
{ 
this.xpos; 
this.ypos; 
this.w;
 this.h;
 this.init=function()
{ } } 
function player_death_effect(){ 
this.xpos;
 this.ypos; 
this.spedx=0; 
this.spedy=0;
 this.w=5; 
this.h=5; 
this.color; 
this.init=function(x,y,sx,sy,color){ 
this.xpos=x; 
this.ypos=y; 
this.spedx=sx; 
this.spedy=sy; 
this.color=color; 
} 
this.draw=function(){
  if(this.xpos<=0)
{ 
 if(this.spedx<0){ 
this.spedx=this.spedx-(this.spedx*2); 
}
else{
 this.spedx=this.spedx*-1;
 } 
 if(this.spedy<0){ 
this.spedy=this.spedy-(this.spedy*2); 
}
else
{ 
this.spedy=this.spedy*-1; 
} 
} 
if(this.xpos+this.w>game.w)
{ if(this.spedx<0){ 
this.spedx=this.spedx-(this.spedx*2);
 }
else
{ 
this.spedx=this.spedx*-1;
 }
 if(this.spedy<0){ 
this.spedy=this.spedy-(this.spedy*2); 
}
else{ 
this.spedy=this.spedy*-1;
 } 
}
 if(this.ypos<=0)
{ 
if(this.spedx<0){ 
this.spedx=this.spedx-(this.spedx*2); 
}
else
{ 
this.spedx=this.spedx*-1;
 } if(this.spedy<0){ 
this.spedy=this.spedy-(this.spedy*2);
 }
else{ 
this.spedy=this.spedy*-1;
 } 
} 
if(this.ypos+this.y>=game.h)
{ if(this.spedx<0){ 
this.spedx=this.spedx-(this.spedx*2);
 }
else{
 this.spedx=this.spedx*-1;
 } 
if(this.spedy<0){ 
this.spedy=this.spedy-(this.spedy*2);
 }
else{ 
this.spedy=this.spedy*-1; 
} 
} 
this.w-=0.03; 
this.h-=0.03; 
 game.draw.fillStyle=this.color; game.draw.fillRect(this.xpos+=this.spedx,this.ypos+=this.spedy,this.w,this.h); 
} 
} var gravity=0; 
 var forceup=0; 
function main_()
{ 
 if(game.start==true){
 window.requestAnimationFrame(main_); 
} 
game.draw.fillStyle=game.bg_color; game.draw.fillRect(game.xpos,game.ypos,game.w,game.h); 
if(game.gameover==false)
{ 
player_();
 } 
obs_(); player_death_paticle_draw_(); if(coords.y_axis(_obs[_obs.length-1].next*-1)>=0)
{ 
create_obs_(); 
} 
game.draw.font="15px tahoma"; game.draw.fillStyle="white"; game.draw.fillText("Score: "+score,20,40); }function player_()
{ 
 player.rot+=1; 
if(player.rot>=360)
{ 
player.rot=0; 
} 
game.draw.save(); game.draw.translate(player.xpos+7,player.ypos+7);
 game.draw.rotate(player.rot*(Math.PI/180)); game.draw.fillStyle=player.color; game.draw.fillRect(-7,-7,player.w,player.h); game.draw.restore(); 
 if(player.ypos>400){
 player.ypos+=forceup-gravity; 
} 
else
{ 
 if(forceup-gravity<0){ 
world.ypos-=forceup-gravity;
 }
else{ 
player.ypos+=forceup-gravity; 
}
 } 
 gravity-=0.19; if(player.ypos+player.w>=game.h&&game.gameover==false)
{
 player_is_dead_();
 var x=document.getElementById("scorearea");
 x.style.display="block";
 var p=document.createElement("p");
 var node = document.createTextNode("Your Score is "+score);
 p.appendChild(node);
 x.appendChild(p);
 var highscore = localStorage.getItem("highscore"); if(highscore !== null){ if (score > highscore) { localStorage.setItem("highscore", score); } } else{ localStorage.setItem("highscore", score); }
 game.gameover=true; 
}
 } 
 function player_is_dead_()
{ 
var rad=360/10; 
var rot=0; 
var speed=25; 
for(var i=0;i<10;i++)
{ 
var xx=100*Math.cos(rot*(Math.PI/180))+player.xpos;
 var yy=100*Math.sin(rot*(Math.PI/180))+player.ypos; 
var sx=xx-player.xpos;
 var sy=yy-player.ypos; 
var distance=Math.sqrt(xx*xx+yy*yy); 
var sped=distance/speed; _player_death_particle.push(new player_death_effect()); _player_death_particle[_player_death_particle.length-1].init(player.xpos+5,player.ypos+5,sx/sped,sy/sped,player.color); rot+=rad;
 } 
} 
function player_death_paticle_draw_()
{ 
for(var i=0;i<_player_death_particle.length;i++){
 _player_death_particle[i].draw(); if(_player_death_particle[i].h<0){ 
_player_death_particle.splice(i,1); 
}
 } 
} 
function obs_()
{ 
 for(var i=0;i<_obs.length;i++)
{ 
_obs[i].draw(i);
 }
 for(var i=0;i<_obs.length;i++){ 
_obs[i].check(i);
 }
 } 
_obs.push(new obs1()); _obs[_obs.length-1].init(colorz[Math.floor(Math.random()*colorz.length)],0,150);
 var create_obs=false;
 create_obs=true; 
function create_obs_()
{
 if(create_obs==true)
{ 
var rand=Math.floor(Math.random()*3); if(rand==0)
{ 
_obs.push(new obs2()); _obs[_obs.length-1].init(colorz[Math.floor(Math.random()*colorz.length)],0, _obs[_obs.length-2].next+90);
 } 
else if(rand==1)
{
 _obs.push(new obs3()); _obs[_obs.length-1].init(colorz[Math.floor(Math.random()*colorz.length)],0, _obs[_obs.length-2].next+40);
 }
else
{
_obs.push(new obs1()); _obs[_obs.length-1].init(colorz[Math.floor(Math.random()*colorz.length)],0, _obs[_obs.length-2].next+80);
}
  } 
} 
create_obs_(); 
create_obs_(); 
function play() {
if(game.start==false)
{
 game.start=true; 
main_(); 
} 
 gravity=0; 
forceup=-3.5; 
} 
window.onload=()=>{ 
main_(); 
}

function obs1()
{ 
this.xpos=0; 
this.ypos=0; 
this.x_axis;
 this.y_axis; 
this.color; 
this.sped=2.4;
this.w=120;
 this.h=20; 
this.toright=false;
this.switched=false; 
this.rot=0; 
this.next=0; 
 this.init=function(color,x_ax,y_ax)
{ 
 this.x_axis=x_ax; 
this.y_axis=y_ax*-1; 
this.color=color; 
this.xpos=20; 
this.next=y_ax+120; 
} 
this.draw=function()
{ 
 if(this.toright==false)
{ 
this.xpos-=this.sped;
 if(this.xpos<=0)
{ 
this.toright=true; 
} 
}
else
{ 
this.xpos+=this.sped;
 if(this.xpos+120>=400)
{ 
this.toright=false;
 } 
}
 this.ypos=coords.y_axis(this.y_axis); game.draw.fillStyle=this.color; game.draw.fillRect(this.xpos,this.ypos,this.w,this.h); if(this.xpos<=player.xpos&&this.xpos+this.w>=player.xpos&&this.ypos<=player.ypos&&this.ypos+this.h>=player.ypos)
{ 
if(player.color!=this.color&&game.gameover==false)
{ 
game.gameover=true; 
var x=document.getElementById("scorearea");
 x.style.display="block";
 var p=document.createElement("p");
 var node = document.createTextNode("Your Score is "+score);
 p.appendChild(node);
 x.appendChild(p);
 var highscore = localStorage.getItem("highscore"); if(highscore !== null){ if (score > highscore) { localStorage.setItem("highscore", score); } } else{ localStorage.setItem("highscore", score); }
player_is_dead_();
 } 
} if(this.xpos<=player.xpos+10&&this.xpos+this.w>=player.xpos+10&&this.ypos<=player.ypos+10&&this.ypos+this.h>=player.ypos+10)
{ 
if(player.color!=this.color&&game.gameover==false)
{ 
game.gameover=true; 
var x=document.getElementById("scorearea");
 x.style.display="block";
 var p=document.createElement("p");
 var node = document.createTextNode("Your Score is "+score);
 p.appendChild(node);
 x.appendChild(p);
 var highscore = localStorage.getItem("highscore"); if(highscore !== null){ if (score > highscore) { localStorage.setItem("highscore", score); } } else{ localStorage.setItem("highscore", score); }
player_is_dead_(); 
} 
} 
 if(this.switched==false)
{ 
game.draw.save(); game.draw.translate(player.xpos+7,coords.y_axis(this.y_axis-50)+7); game.draw.rotate(this.rot*(Math.PI/180.)); game.draw.fillStyle="#999999"; game.draw.fillRect(-7,-7,14,14); game.draw.restore(); if(coords.y_axis(this.y_axis-50)+7>=player.ypos)
{ 
this.switched=true;
 score++; player.color=colorz[Math.floor(Math.random()*colorz.length)]; 
}
 this.rot+=2;
 if(this.rot>=360)
{ 
this.rot=0; 
} 
} 
}
 this.check=function(i)
{
 if(this.ypos-10>game.h)
{ _obs.splice(i,1); 
} } }

function obs2()
{ 
this.xpos=0; 
this.ypos=0; 
this.x_axis; 
this.y_axis; 
this.rot=0; 
this.rotsped=0.02; 
this.next=0; 
this.switched=false; 
this.rott=0; 
this.init=function(color,x_ax,y_ax )
{ 
 this.x_axis=x_ax;
 this.y_axis=y_ax*-1; 
this.color=color; 
this.xpos=200-5; 
this.next=y_ax+180;
 }
 this.draw=function(i)
{  
var rad=360/150;
var rot=0;  
var color=""; 
 for(var i=0;i<150;i++)
{ 
var xx=60*Math.cos(this.rot*(Math.PI/180))+this.xpos; 
var yy=60*Math.sin(this.rot*(Math.PI/180))+coords.y_axis(this.y_axis); 
 if(i<50)
{ 
color="red";
 }
else 
if(i>=50 && i<100)
{
 color="green";
 }
else
{ 
color="blue"; 
}  if(xx<=player.xpos&&xx+10>=player.xpos&&yy<=player.ypos&&yy+10>=player.ypos)
{ 
 if(player.color!=color&&game.gameover==false)
{ 
game.gameover=true;
var x=document.getElementById("scorearea");
 x.style.display="block";
 var p=document.createElement("p");
 var node = document.createTextNode("Your Score is "+score);
 p.appendChild(node);
 x.appendChild(p);
 var highscore = localStorage.getItem("highscore"); if(highscore !== null){ if (score > highscore) { localStorage.setItem("highscore", score); } } else{ localStorage.setItem("highscore", score); }
 player_is_dead_();
 }
 }  if(xx<=player.xpos+player.h&&xx+10>=player.xpos+player.h&&yy<=player.ypos+player.h&&yy+10>=player.ypos+player.h)
{ 
if(player.color!=color&&game.gameover==false)
{ 
game.gameover=true; player_is_dead_();
 }
 } 
 game.draw.fillStyle=color; game.draw.fillRect(xx,yy,10,10);
  this.rot+=rad+this.rotsped;
 } 
if(this.switched==false)
{ 
game.draw.save(); game.draw.translate(player.xpos+7,coords.y_axis(this.y_axis)+7); game.draw.rotate(this.rott*(Math.PI/180.)); game.draw.fillStyle="#999999"; game.draw.fillRect(-7,-7,14,14); game.draw.restore(); if(coords.y_axis(this.y_axis)+7>=player.ypos)
{
 this.switched=true; 
score++; player.color=colorz[Math.floor(Math.random()*colorz.length)]; 
}
 this.rott+=2; 
if(this.rott>=360)
{ this.rott=0; } } }
 this.check=function(i)
{ 
if(coords.y_axis(this.y_axis)-90>game.h)
{
 _obs.splice(i,1);
 } 
} 
} 

function obs3()
{ 
this.xpos=0; 
this.ypos=0; 
this.x_axis;
 this.y_axis; 
this.rot=0; 
this.w=3; 
this.h=2; 
this.rotsped=0.01; 
this.next=0;
 this.switched=false; 
this.rott=0;
 this.init=function(color,x_ax,y_ax)
{ 
 this.x_axis=x_ax;
 this.y_axis=y_ax*-1; 
this.color=color;
 this.xpos=192-35; 
this.next=y_ax+160;
 }
 this.draw=function()
{ 
var rad=360/150; 
var color=0; this.ypos=coords.y_axis(this.y_axis);
 for(var i=0;i<150;i++)
{ 
if(i<50)
{
 color="red";
 }
else if(i>=50&&i<100)
{ 
color="green";
 } 
else{ color="blue"; } 
var xx=40*Math.cos(this.rot*(Math.PI/180))+this.xpos; 
var yy=40*Math.sin(this.rot*(Math.PI/180))+this.ypos; 
var rot=Math.atan2(yy-this.ypos,xx-this.xpos); game.draw.save(); game.draw.translate(xx+this.w,yy); game.draw.rotate(rot); game.draw.fillStyle=color; game.draw.fillRect(this.w*-1,0,this.w,this.h); game.draw.restore(); 
var tx= (player.xpos+(player.w/2))-xx+1.5;
 var ty=(player.ypos+(player.h/2))-yy; 
var d=Math.sqrt(tx*tx+ty*ty); 
if(d<=10)
{ 
if(player.color!=color&&game.gameover==false)
{ 
game.gameover=true; 
var x=document.getElementById("scorearea");
 x.style.display="block";
 var p=document.createElement("p");
 var node = document.createTextNode("Your Score is "+score);
 p.appendChild(node);
 x.appendChild(p);
 var highscore = localStorage.getItem("highscore"); if(highscore !== null){ if (score > highscore) { localStorage.setItem("highscore", score); } } else{ localStorage.setItem("highscore", score); }
player_is_dead_(); 
}
 } 
var xx=40*Math.cos((180-this.rot)*(Math.PI/180))+this.xpos+83;
 var yy=40*Math.sin((180-this.rot)*(Math.PI/180))+this.ypos; 
var rot=Math.atan2(yy-this.ypos,xx-this.xpos); game.draw.save(); game.draw.translate(xx+this.w,yy); game.draw.rotate(rot); game.draw.fillStyle=color; game.draw.fillRect(this.w*-1,0,this.w,this.h); game.draw.restore(); 
this.rot+=rad+this.rotsped;
 } 
if(this.switched==false)
{ 
game.draw.save(); game.draw.translate(player.xpos+7,coords.y_axis(this.y_axis-80)+7); game.draw.rotate(this.rott*(Math.PI/180)); game.draw.fillStyle="#999999"; game.draw.fillRect(-7,-7,14,14); game.draw.restore(); if(coords.y_axis(this.y_axis-80)+7>=player.ypos)
{
 this.switched=true;
 score++; player.color=colorz[Math.floor(Math.random()*colorz.length)];
 }
 this.rott+=2; 
if(this.rott>=360)
{ this.rott=0; } } } 
this.check=function(i)
{ if(this.ypos-50>game.h)
{ _obs.splice(i,1);
 } 
} 
} 

function high()
{
    var abc = localStorage.getItem("highscore");
   window.alert("Your highscore is "+abc);
}



</script>
